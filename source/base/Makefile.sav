MLIB=../../lib/base.$(MACHINE).a
VMSTREE=/usr/tmp/vista
OBJS=alias.o boxset.o buffer.o chnghead.o copy.o def.o disk.o diskproc.o       \
dispose.o doset.o eofhandle.o errhandle.o fileopen.o fits.o getcom.o goto.o    \
hedit.o help.o iftest.o pedit.o printf.o printout.o readcmnd.o save.o setbell.o\
setdir.o shortcom.o showproc.o skiplist.o statcmnd.o varset.o vaxedit.o        \
verify.o vparameters.o cmemory.o headcon.o masktoim.o setup.o hjd.o oldhelp.o
LOBJS=$(MLIB)(alias.o) $(MLIB)(boxset.o) $(MLIB)(buffer.o) $(MLIB)(chnghead.o) \
$(MLIB)(copy.o) $(MLIB)(def.o) $(MLIB)(disk.o) $(MLIB)(diskproc.o)             \
$(MLIB)(dispose.o) $(MLIB)(doset.o) $(MLIB)(eofhandle.o) $(MLIB)(errhandle.o)  \
$(MLIB)(fileopen.o) $(MLIB)(fits.o) $(MLIB)(getcom.o) $(MLIB)(goto.o)          \
$(MLIB)(hedit.o) $(MLIB)(help.o) $(MLIB)(iftest.o) $(MLIB)(pedit.o)            \
$(MLIB)(printf.o) $(MLIB)(printout.o) $(MLIB)(readcmnd.o) $(MLIB)(save.o)      \
$(MLIB)(setbell.o) $(MLIB)(setdir.o) $(MLIB)(shortcom.o) $(MLIB)(showproc.o)   \
$(MLIB)(skiplist.o) $(MLIB)(statcmnd.o) $(MLIB)(varset.o) $(MLIB)(vaxedit.o)   \
$(MLIB)(verify.o) $(MLIB)(vparameters.o) $(MLIB)(cmemory.o)    \
$(MLIB)(headcon.o) $(MLIB)(masktoim.o) $(MLIB)(setup.o) $(MLIB)(hjd.o) $(MLIB)(oldhelp.o) $(MLIB)(strcmp.o)
VMSCODE=alias.for boxset.for buffer.for chnghead.for copy.for def.for disk.for \
diskproc.for dispose.for doset.for eofhandle.for errhandle.for fileopen.for    \
fits.for getcom.for goto.for hedit.for help.for iftest.for pedit.for printf.for\
printout.for readcmnd.for save.for setbell.for setdir.for shortcom.for         \
showproc.for skiplist.for statcmnd.for varset.for vaxedit.for verify.for       \
vparameters.for headcon.for masktoim.for setup.for hjd.for

#
#       Teach make how to do a number of things that certain systems don't know
.SUFFIXES:
.SUFFIXES: .out .o .c .e .r .F .f .y .l .s .p .a
.F.o:
	$(CPP) $(CPPFLAGS) $*.F $*.$(FPP)
	$(FC) -c $(FFLAGS) $*.$(FPP)
	$(RM) -f $*.$(FPP)
.F.a:
	$(CPP) $(CPPFLAGS) $< $*.$(FPP)
	$(FC) -c $(FFLAGS) $*.$(FPP)
	$(AR) rv $@ $*.o
	$(RM) -f $*.$(FPP) 
	rm -f $*.o
.f.a:
	$(FC) -c $(FFLAGS) $*.f
	$(AR) rv $@ $*.o
	rm -f $*.o
.F.inc: ; $(CPP) $(CPPFLAGS) $*.F $*.inc
.c.a:
	$(CC) -c $(CFLAGS) $*.c
	$(AR) rv $@ $*.o
	rm -f $*.o

#       Teach make how to make files for export to a VMS system
.SUFFIXES: .vmsf .for .inc .vmsc .com
.vmsf.for: ; cp $*.vmsf $*.for
.vmsc.com: ; cp $*.vmsc $*.com
.f.for: ; cp $*.f $*.for
.F.for: ; $(CPP) $(VMSFLAGS) $*.F $*.for
#
datefile::Vista.h $(MLIB) tidy
	date > datefile
#       Don't let make delete the object library!
.PRECIOUS: $(MLIB)
#
$(MLIB):$(DOOBJS)
	$(MAR)
	-$(MRM)
	-ranlib $(MLIB)
#getcom.o:          getcom.F ../Vista.$(MACHINE)
#varset.o:          varset.F ../Vista.$(MACHINE)
#$(MLIB)(getcom.o): getcom.F ../Vista.$(MACHINE)
#$(MLIB)(varset.o): varset.F ../Vista.$(MACHINE)
#getcom.o: 
clean:
	-rm *.o \#* *.bak
tidy:
	-rm Vista.h datefile
Vista.h:
	ln -s ../Vista.$(MACHINE) Vista.h
#       THE FOLLOWING STUFF MAKES CODE FOR THE VAXen
avmscode: Vista.h.avms $(VMSCODE)
	-mkdir $(VMSTREE)/source/base
	mv *.for $(VMSTREE)/source/base
	cp *.c $(VMSTREE)/source/base
	cp ../Vista.avms $(VMSTREE)/source/base/Vista.h
	-rm Vista.h avmscode
	date >  avmscode
Vista.h.avms:
	-rm Vista.h
	ln -s ../Vista.avms Vista.h
uvmscode: Vista.h.uvms $(VMSCODE)
	-mkdir $(VMSTREE)/source/base
	mv *.for $(VMSTREE)/source/base
	cp *.c $(VMSTREE)/source/base
	cp ../Vista.uvms $(VMSTREE)/source/base/Vista.h
	-rm Vista.h uvmscode
	date >  uvmscode
Vista.h.uvms:
	-rm Vista.h
	ln -s ../Vista.uvms Vista.h
pvmscode: Vista.h.pvms $(VMSCODE)
	-mkdir $(VMSTREE)/source/base
	mv *.for $(VMSTREE)/source/base
	cp *.c $(VMSTREE)/source/base
	cp ../Vista.pvms $(VMSTREE)/source/base/Vista.h
	-rm Vista.h pvmscode
	date >  pvmscode
Vista.h.pvms:
	-rm Vista.h
	ln -s ../Vista.pvms Vista.h
