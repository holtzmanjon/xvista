/MongoNormalFont /Helvetica def                         % Mongo Regular font
/MongoGreekFont /Symbol def                             % Mongo Greek font
FontDirectory /ZapfChancery-MediumItalic known
{/MongoScriptFont /ZapfChancery-MediumItalic def}       % Mongo Script on NTX
{/MongoScriptFont /Times-Roman def}                     % Mongo Serif
ifelse
/MongoTinyFont /Courier def                             % Mongo Typewriter font
/MongoItalicFont /Helvetica-Oblique def                 % Mongo Italic font
/MongoOtherFont /ZapfDingbats def                       % Mongo Other font
%%%%%%%%%%%%%%%%
%/ISOLatin1Encoding where        % does ISOLatin1Encoding Vector exist?
%{pop                            % get the dictionary off the stack
%    MongoNormalFont findfont
%    dup length dict begin
%        { 1 index /FID ne {def} {pop pop} ifelse} forall
%        /Encoding ISOLatin1Encoding def
%        currentdict
%    end
%    /MongoNormalISOFont exch definefont pop
%} if
%%%%%%%%%%%%%%%%
/MongoLabelDict 70 dict def

% Put a bunch of variables into our own dictionary
/MongoLabelStartup {
MongoLabelDict begin
/ptsize 0 def                   % Text point size passed to MongoPutlabel
/rotcode 0 def                  % Rotation angle passed to MongoPutlabel
/hpos 0 def                     % Horizontal position passed to MongoPutlabel
/vpos 0 def                     % Vertical position passed to MongoPutlabel
/modechar 92 def                % The backslash = 92
/modecount 0 def                % Counts occurances of modechar
/mode 0 def                     % 0 = normal mode
				% 1 = Special font for 1 character
				% 2 = Special font permanent
/submode 0 def                  % 0 = not super/sub
				% 1 = super/sub for 1 character
				% 2 = super/sub permanent
/superlevel 0 def               % super/sub level counter
				% >0 means superscript
				% <0 means subscript
/supershift 0.55 def            % Percent of font height to shift super/sub
/superscale 1.67 def            % Font scale factor for super/sub
/voff 0 def                     % Vertical offset for super/sub
/curpt 1 def                    % Current font scale factor
/curheight 1 def                % Height of font with current scaling
/fontnum 0 def                  % 0 = normal font
				% 1 = Greek font
				% 2 = Script font
				% 3 = Tiny font
				% 4 = Italic font
				% 5 = Other font
/literalmode 0 def              % Set for literal octal code evaluation
/cfontnum 0 def                 % Current font number
/cptsize 0 def                  % Last point size used
/fsize 0 def                    % Temporary for font scale
/xlen 0 def                     % Length of string in points
/ylen 0 def                     % Height of string in points
/xadj 0 def                     % Text horizontal offset
/yadj 0 def                     % Text vertical offset
/romanchar (r) 0 get def        % Character value for Roman font
/greekchar (g) 0 get def        % Character value for Greek font
/scriptchar (s) 0 get def       % Character value for Script font
/tinychar (t) 0 get def         % Character value for Typewriter font
/italchar (i) 0 get def         % Character value for Italic font
/otherchar (o) 0 get def        % Character value for Other font
/usuperchar (U) 0 get def       % Character value for superscript mode
/usubchar (D) 0 get def         % Character value for subscript mode
/superchar (u) 0 get def        % Character value for superscript mode
/subchar (d) 0 get def          % Character value for subscript mode
/zerochar (0) 0 get def         % 0 character code
/sevenchar (7) 0 get def        % 7 character code
/xjustcode 0 def                % Horizontal centering code
/yjustcode 0 def                % Vertical centering code
/ybot 0 def                     % Bottom of text
/ycen 0 def                     % Center of text
/ycap 0 def                     % Top of capital letters
/ytop 0 def                     % Top of font
/charcode 0 def                 % Used by dochar routine
/charval 0 def                  % Used by dochar to build literal code values
/debugline 720 def

% enter with (string)
%/debug {
%       gsave
%       72 debugline translate
%       0 0 moveto
%       show
%       grestore
%       /debugline debugline 20 sub def
%} def

% Print the string on the stack
/doprint {
	gsave
	hpos vpos translate
	rotcode rotate
	xadj xlen add yadj voff add moveto
	show
	grestore
} def

% Determine the text adjustment parameters based on the centering code
/SetXYadj {
%       /yadj                           % First vertical centering
%       justcode 4 lt
%               {ylen neg def}
%               {justcode 7 lt
%                       {ylen -2 div def}
%                       {0 def}
%                ifelse}
%       ifelse
%       /xadj                           % Then horizontal centering
%       justcode 2 add 3 mod 0 eq
%               {xlen neg def}
%               {justcode 1 add 3 mod 0 eq
%                       {xlen -2 div def}
%                       {0 def}
%                ifelse}
%       ifelse
	/yadj                           % First vertical centering
	yjustcode -2 eq
		{ybot}
		{yjustcode -1 eq
			{0}
			{yjustcode 0 eq
				{ycen}
				{yjustcode 1 eq
					{ycap}
					{ytop}
				 ifelse}
			 ifelse}
		 ifelse}
	ifelse
	neg def
	/xadj                           % Then horizontal centering
	xjustcode 1 add xlen mul -2 div def
} def

% Define the current font and save the specifications for the font
% Enter with font name and scale on the stack
/DoFont {
	/cptsize exch def               % Save font scale
	/cfontnum fontnum def           % Save Current font number
%       Now create the new current font
	findfont [ cptsize 0 0 cptsize 0 0 ] makefont setfont
} def

% call DoFont if a new font is needed
% Enter with font name and scale on the stack
/SetupFont {
	dup
	fontnum cfontnum eq exch        % Did font change?
	cptsize eq                      % Did point size change?
	and
		{pop pop}               % Nothing changed - just clean up
		{DoFont}                % Set a new font
	ifelse
} def

% Select a font based on the font number
/SelectFont {
    ptsize curpt mul                % Scale to default point size
    fontnum 5 eq
	{MongoOtherFont exch SetupFont}
	{fontnum 4 eq
	    {MongoItalicFont exch SetupFont}
	    {fontnum 3 eq
		{MongoTinyFont exch SetupFont}
		{fontnum 2 eq
		    {MongoScriptFont exch SetupFont}
		    {fontnum 1 eq
			{MongoGreekFont exch SetupFont}
			% default is to Normal font
			{MongoNormalFont exch SetupFont}
		    ifelse}
		 ifelse}
	     ifelse}
	ifelse}
    ifelse
} def

% Enter with character code on the stack
/dochar {
	/charcode exch def              % Save the character code
	literalmode 0 ne
		{literalmode 3 eq
			{/charval 0 def}
		 if
		/charval charval 8 mul charcode zerochar sub 7 and add def
		/literalmode literalmode 1 sub def
		literalmode 0 eq
			{/charcode charval def}
		if
	} if
	literalmode 0 eq
	{
	SelectFont                      % Check and set font
	/thechar ( ) dup 0 charcode put def % Generate 1-character string
	printit 1 eq {thechar doprint} if       % Print it if required
	thechar stringwidth             % Get its width
	pop xlen add /xlen exch def     % Add it to total string width
%       Reset various modes if turned on for a single character
	submode 1 eq {-1 SetSuperSub /submode 0 def} if
	submode -1 eq {1 SetSuperSub /submode 0 def} if
	mode 1 eq {/fontnum 0 def /mode 0 def} if
	} if
} def

% Compute current height of the font (assumed to be height of '[')
/GetCurheight {
	gsave
	newpath
	0 0 moveto
	([) true charpath flattenpath pathbbox
	/ycap exch def pop /ybot exch def pop
	/ytop ptsize ybot add def
	/ycen ycap 2 div def
%       exch pop sub neg exch pop
	ycap ybot sub
	grestore
} def

% Increment the modecount unless it will become too big.
/countmode {
	modecount 1 gt
		{modechar dochar        % An error - print a backslash
		/modecount 0 def}
		{/modecount modecount 1 add def}
		ifelse
} def

/ResetModecount {
	/mode modecount def
	/modecount 0 def
} def

% Enter with superlevel increment (+1 or -1) on the stack
/SetSuperSub {
%       Here we compute the new vertical offset and font scale factor
	dup 0 gt
		{
		/voff voff supershift curheight curpt mul mul add def
		superlevel 0 ge
			{/curpt curpt superscale div def}
			{/curpt curpt superscale mul def}
		ifelse
		}
		{
		superlevel 0 gt
			{/curpt curpt superscale mul def}
			{/curpt curpt superscale div def}
		ifelse
		/voff voff supershift curheight curpt mul mul sub def
		}
	ifelse
	dup superlevel add /superlevel exch def
	modecount mul /submode exch def
	/modecount 0 def
} def

% Check for control characters.
/setmode {
	c romanchar eq
	    {/fontnum 0 def ResetModecount}
	    {c greekchar eq
		{/fontnum 1 def ResetModecount}
		{c scriptchar eq
		    {/fontnum 2 def ResetModecount}
		    {c tinychar eq
			{/fontnum 3 def ResetModecount}
			{c italchar eq
			    {/fontnum 4 def ResetModecount}
			    {c otherchar eq
				{/fontnum 5 def ResetModecount}
				{c superchar eq c usuperchar eq or
				    {1 SetSuperSub}
				    {c subchar eq c usubchar eq or
					{-1 SetSuperSub}
					{c zerochar ge c sevenchar le and
					    {/literalmode 3 def
					     c dochar
					     /modecount 0 def}
					    {1 1 modecount {modechar dochar} for
					     c dochar}
					ifelse}
				    ifelse}
				ifelse}
			    ifelse}
			ifelse}
		    ifelse}
		ifelse}
	    ifelse}
	ifelse
} def

% Enter with string on the stack
/MongoStringWidth {
    {
	/c exch def             % Put character code in c
	c modechar eq           % Check for backslash
		{countmode}     % Backslash seen - Bump count
		{modecount 0 gt % No backslash
			{setmode}  %But backslash recently seen - Set new mode
			{c dochar} % Regular character
		ifelse}
	ifelse
    } forall
} def

% Called to reset a few things for each pass through MongoStringWidth
/InitAll {
	/xlen 0 def
	/submode 0 def
	/superlevel 0 def
	/mode 0 def
	/modecount 0 def
	/voff 0 def
	/curpt 1 def
	/fontnum 0 def
	/literalmode 0 def
	MongoNormalFont ptsize DoFont
} def
end
} def

% Input:
%       hpos vpos xjust yjust rot ptsize (text) putlabel
/MongoPutlabel {
	gsave
	MongoLabelStartup               % Set up our dictionary
	MongoLabelDict begin            % Invoke our dictionary
	/textstr exch def               % Save all parameters - the text
	/ptsize exch def                % Point size of characters
	/rotcode exch def               % Rotation angle
	/yjustcode exch def             % Justification code vertically
	/xjustcode exch def             % Justification code horizontally
	/vpos exch def                  % Vertical position
	/hpos exch def                  % Horizontal position
	InitAll                         % Initialize a few critical values
	/curheight GetCurheight def     % Find character height
	/ylen curheight def             % Height of string in points
	/printit 0 def                  % First pass just get length
	textstr MongoStringWidth        % Do it!
	SetXYadj                        % Compute text centering values
	InitAll                         % Reset critical values again
	/printit 1 def                  % Now print
	textstr MongoStringWidth        % DO IT!!
	end                             % Pop dictionary
	grestore
} def
