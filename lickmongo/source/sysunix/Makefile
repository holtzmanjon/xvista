#    ********* DO NOT EDIT THIS FILE *********
#  It is automatically generated and your changes will not be used! 
MACHINE=macosx
CPP=/usr/bin/cpp
INCCPP=/usr/bin/cpp
FPP=for
CPPFLAGS=-DX11_exists -I/usr/X11/include -traditional -P
CC=cc
CFLAGS=-O -DX11_exists -I/usr/X11/include -DFORT -DUNIX -I/usr/include/bsd -I/sw/include
FC=gfortran
FFLAGS=-O -ffixed-line-length-132 
LD=gfortran
LDFLAGS=-L/sw/lib
RM=rm
AR=ar
DX11=-DX11_exists -I/usr/X11/include
X11DEV=x11_.o x11.o xgets.o trackbox.o
LX11DEV=$(MLIB)(x11_.o) $(MLIB)(x11.o) $(MLIB)(xgets.o) $(MLIB)(trackbox.o)
X11LIB=-L/usr/X11/lib64 -L/usr/X11/lib -lX11
SUNIEEE=
OPTFLAG=
BSTATIC=-lgcc
DOOBJS=$(LOBJS)
MAR=
MRM=$(RM) *.o
LREADLINE=
WCSLIB=
#       ** COPYRIGHT ****  COPYRIGHT ****  COPYRIGHT ****  COPYRIGHT **
#       This makefile is Copyright (c) 1987 Steven L. Allen
#       The file COPYRIGHT must accompany this file.  See it for details.
#       ** COPYRIGHT ****  COPYRIGHT ****  COPYRIGHT ****  COPYRIGHT **
#
MLIB=../../../lib/libmgo.$(MACHINE).a
#
#       The dosystem and vsystem routines are examples of a scheme by which
#       system() calls can be made without creating a child that requires
#       as much memory as its parent.  These are highly recommended if MONGO
#       is called from a program which has large VM requirements.
#


OBJS=check.o flushit.o handlintr.o mhair.o \
mongoedit.o mongoenv.o ttsub.o ttopen.o userhost.o usleep.o # vsystem.o


LOBJS=$(MLIB)(check.o) $(MLIB)(flushit.o) \
$(MLIB)(handlintr.o) $(MLIB)(mhair.o) $(SUNIEEE) \
$(MLIB)(mongoedit.o) $(MLIB)(mongoenv.o) $(MLIB)(ttsub.o) $(MLIB)(ttopen.o) \
$(MLIB)(userhost.o) $(MLIB)(usleep.o) # $(MLIB)(vsystem.o)




#########
#       Teach make how to do a number of things that certain systems don't know
.SUFFIXES:
.SUFFIXES: .out .o .c .e .r .F .f .y .l .s .p .inc .F .a
.F.o:
	$(CPP) $(CPPFLAGS) $*.F $*.$(FPP)
	$(FC) -c $(FFLAGS) $*.$(FPP)
	$(RM) -f $*.$(FPP)
.F.a:
	$(CPP) $(CPPFLAGS) $< $*.$(FPP)
	$(FC) -c $(FFLAGS) $*.$(FPP)
	$(AR) rv $@ $*.o
	$(RM) -f $*.$(FPP) 
	rm $*.o
.f.a:
	$(FC) -c $(FFLAGS) $*.f
	$(AR) rv $@ $*.o
	rm -f $*.o
.F.inc: ; $(INCCPP) $(CPPFLAGS) $*.F  $*.inc
.c.a:
	$(CC) -c $(CFLAGS) $*.c
	$(AR) rv $@ $*.o
	rm -f $*.o
#########
#
datefile::Config.$(MACHINE) Config.h MONGOFIL.inc MONGOLUN.inc \
	MONGOPAR.inc MONGODEV.inc $(MLIB) # dosystem
	-rm MONGO*.inc
	date > datefile
#       Don't let make delete the mongo object library!
.PRECIOUS: $(MLIB)
#
#       Either LOBJS or OBJS should be an empty string
#       This is done by forcing environment variables to override internal ones
$(MLIB): $(DOOBJS)
	$(MAR)
	-$(MRM)
	-ranlib $(MLIB)
clean:  tidy
	-rm -f *.o Config.* MONGO*.inc
tidy:
	-rm -f datefile *vmscode pccode a.out *.trace \#* *.bak 
#########
#       The present configuration of the MONGO* files allows for a single
#       NFS-mounted copy of the source code to generate binaries for several
#       different machine architectures IF AND ONLY IF all those machines
#       have the /bin/make which knows how to look at object files which are
#       being stored in archives (libraries) of object files.
#       CAVEAT:  Only one architecture can be "make"ing at a time.
Config.h:  Config.$(MACHINE)
	ln -s ../Config.$(MACHINE) Config.h
#       We use Config.$(MACHINE) as an indicator of the last architecture "make"d
Config.$(MACHINE):
	-rm -f Config.* MONGO*.inc
	ln -s ../Config.$(MACHINE) .
#       The MONGO*.inc files must be preprocessed for the right architecture
MONGOLUN.inc: MONGOLUN.F Config.h
MONGOPAR.inc: MONGOPAR.F Config.h
MONGOFIL.inc: MONGOFIL.F Config.h
MONGODEV.inc: MONGODEV.F Config.h
#########
#mongoenv.o: mongoenv.F MONGOFIL.F
#flushit.o: flushit.c termio.h
#mhair.o: mhair.c termio.h
#check.o: check.c termio.h
$(MLIB)(mongoenv.o): mongoenv.F MONGOFIL.F
$(MLIB)(flushit.o): flushit.c termio.h
$(MLIB)(mhair.o): mhair.c termio.h
$(MLIB)(check.o): check.c termio.h
#########
# dosystem: dosystem.o
#        cc -o dosystem dosystem.o
#        -rm ../../dosystem
#        ln dosystem  ../../dosystem
