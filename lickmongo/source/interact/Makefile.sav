#       ** COPYRIGHT ****  COPYRIGHT ****  COPYRIGHT ****  COPYRIGHT **
#       This makefile is Copyright (c) 1987 Steven L. Allen
#       The file COPYRIGHT must accompany this file.  See it for details.
#       ** COPYRIGHT ****  COPYRIGHT ****  COPYRIGHT ****  COPYRIGHT **
#
MLIB=../../../lib/libmgo.$(MACHINE).a
#       Define where the temporary VMS source code tree will be made
VMSTREE=/usr/tmp
VMSCODE=compile.com \
	execute.for help.for insert.for interprt.for maxecute.for \
	mgoutil.for mongo.for touva.for \
	parse.for process.for readata.for playback.for readata.cmn


OBJS=execute.o help.o insert.o interprt.o maxecute.o mgoutil.o mongo.o \
touva.o parse.o process.o rdcomlin.o readata.o playback.o readrc.o


LOBJS=$(MLIB)(execute.o) $(MLIB)(help.o) $(MLIB)(insert.o) \
$(MLIB)(interprt.o) $(MLIB)(maxecute.o) $(MLIB)(mgoutil.o) $(MLIB)(mongo.o) \
$(MLIB)(touva.o) $(MLIB)(parse.o) $(MLIB)(process.o) $(MLIB)(rdcomlin.o) \
$(MLIB)(readata.o) $(MLIB)(playback.o) $(MLIB)(readrc.o)




#########
#       Teach make how to do a number of things that certain systems don't know
.SUFFIXES:
.SUFFIXES: .out .o .c .e .r .F .f .y .l .s .p .inc .F .a
.F.o:
	$(CPP) $(CPPFLAGS) $*.F $*.$(FPP)
	$(FC) -c $(FFLAGS) $*.$(FPP)
	$(RM) -f $*.$(FPP)
.F.a:
	$(CPP) $(CPPFLAGS) $< $*.$(FPP)
	$(FC) -c $(FFLAGS) $*.$(FPP)
	$(AR) rv $@ $*.o
	$(RM) -f $*.$(FPP) 
	rm -f $*.o
.f.a:
	$(FC) -c $(FFLAGS) $*.f
	$(AR) rv $@ $*.o
	rm -f $*.o
.F.inc: ; $(INCCPP) $(CPPFLAGS) $*.F  $*.inc
.c.a:
	$(CC) -c $(CFLAGS) $*.c
	$(AR) rv $@ $*.o
	rm -f $*.o

#       Teach make how to make files for export to a VMS system
.SUFFIXES: .vmsf .for .vmsc .com
.vmsf.for: ; cp $*.vmsf $*.for
.vmsc.com: ; cp $*.vmsc $*.com
.F.for: ; $(CPP) $(VMSFLAGS) $*.F $*.for
.f.for: ; cp $*.f $*.for
#########
#
datefile::Config.$(MACHINE) Config.h MONGOFIL.inc MONGOLUN.inc \
	MONGOPAR.inc MONGODEV.inc $(MLIB)
	-rm MONGO*.inc
	date > datefile
#       Don't let make delete the mongo object library!
.PRECIOUS: $(MLIB)
#
#       Either LOBJS or OBJS should be an empty string
#       This is done by forcing environment variables to override internal ones
$(MLIB): $(DOOBJS)
	$(MAR)
	-$(MRM)
	-ranlib $(MLIB)
clean:  tidy
	-rm -f *.o Config.* MONGO*.inc
tidy:
	-rm -f datefile *vmscode pccode a.out *.trace \#* *.bak
#########
#       The present configuration of the MONGO* files allows for a single
#       NFS-mounted copy of the source code to generate binaries for several
#       different machine architectures IF AND ONLY IF all those machines
#       have the /bin/make which knows how to look at object files which are
#       being stored in archives (libraries) of object files.
#       CAVEAT:  Only one architecture can be "make"ing at a time.
Config.h:  Config.$(MACHINE)
	ln -s ../Config.$(MACHINE) Config.h
#       We use Config.$(MACHINE) as an indicator of the last architecture "make"d
Config.$(MACHINE):
	-rm -f Config.* MONGO*.inc
	ln -s ../Config.$(MACHINE) .
#       The MONGO*.inc files must be preprocessed for the right architecture
MONGOLUN.inc: MONGOLUN.F Config.h
MONGOPAR.inc: MONGOPAR.F Config.h
MONGOFIL.inc: MONGOFIL.F Config.h
MONGODEV.inc: MONGODEV.F Config.h
#########
#       These dependencies insure that a vocabulary change is assimilated
#help.o: help.F vocab.inc
#insert.o: insert.F vocab.inc
#interprt.o: interprt.F vocab.inc
#maxecute.o: maxecute.F vocab.inc
#playback.o: playback.F vocab.inc vocabdat.inc
$(MLIB)(help.o): help.F vocab.inc
$(MLIB)(insert.o): insert.F vocab.inc
$(MLIB)(interprt.o): interprt.F vocab.inc
$(MLIB)(maxecute.o): maxecute.F vocab.inc
$(MLIB)(playback.o): playback.F vocab.inc vocabdat.inc




#########
#       Exports to non-Unix systems
nonunix:
	-mkdir          $(VMSTREE)/lickmongo
	-mkdir          $(VMSTREE)/lickmongo/source
	-mkdir          $(VMSTREE)/lickmongo/source/interact
	-mv *.for       $(VMSTREE)/lickmongo/source/interact
	-mv *.com       $(VMSTREE)/lickmongo/source/interact
	-cp *.cmn       $(VMSTREE)/lickmongo/source/interact
	-cp vocab*.inc  $(VMSTREE)/lickmongo/source/interact
	-rm Config.h
#       THE FOLLOWING STUFF MAKES CODE FOR THE VAXen
vmscode: Config.h.vms $(VMSCODE) nonunix
	date > vmscode
Config.h.vms:
	-rm Config.h
	ln -s ../Config.vms  Config.h
#
uvmscode:Config.h.uvms $(VMSCODE) nonunix
	date > uvmscode
Config.h.uvms:
	-rm Config.h
	ln -s ../Config.uvms Config.h
#
bvmscode:Config.h.bvms $(VMSCODE) nonunix
	date > bvmscode
Config.h.bvms:
	-rm Config.h
	ln -s ../Config.bvms Config.h
#
pccode:Config.h.pc $(VMSCODE) nonunix
#       date > pccode
Config.h.pc:
	-rm Config.h
	ln -s ../Config.pc Config.h
