#include "Vista.h"

      SUBROUTINE GFIT(A,IMAGESR,IMAGEER,IMAGESC,IMAGEEC)

C
C  GFIT - Fit gaussian to spectrum
C
C---------------------------------------------------------------------------

      REAL*4 A(IMAGESC:IMAGEEC,IMAGESR:IMAGEER)

#ifdef VMS
      INCLUDE 'VINCLUDE:VISTALINK.INC'
      INCLUDE 'VINCLUDE:IMAGELINK.INC'
      INCLUDE 'VINCLUDE:WORK.INC'
#else 
      INCLUDE 'vistadisk/source/include/vistalink.inc'
      INCLUDE 'vistadisk/source/include/imagelink.inc'
      INCLUDE 'vistadisk/source/include/work.inc'
#endif
      LOGICAL HAVEBOX, KEYCHECK, LOAD, VERBOSE, ABSORP, HAVEFILE
      LOGICAL FITCONT, GLLS
      INTEGER SR, ER, SC, EC, IC1, IC2, IC3, IC4
      PARAMETER(MAXPAR=4)
      REAL PAR(MAXPAR), LAMBDA
      REAL BETA(MAXPAR), ALPHA(MAXPAR,MAXPAR), DEL(MAXPAR), DRV(MAXPAR)
      REAL BETAOLD(MAXPAR), ALPHAOLD(MAXPAR,MAXPAR), PAROLD(MAXPAR)
      CHARACTER PARM*8, LINEFILE*64, TWORD*80, LINE*80
      PARAMETER (MAXPTS = 100)
      REAL*8 XFIT(MAXPTS), YFIT(MAXPTS), W(MAXPTS)
      REAL*8 LPAR(2), DPAR(2), WORK(4), VAR
      REAL*8 B1, B2, B3, B4, W0, WID, FPOLY
      EXTERNAL FPOLY
      DOUBLE PRECISION LAMPIX, PIXLAM

C  List allowed keywords.
      CALL KEYINIT
      CALL KEYDEF('BOX=')
      CALL KEYDEF('LINES=')
      CALL KEYDEF('MAXITER=')
      CALL KEYDEF('GAIN=')
      CALL KEYDEF('RN=')
      CALL KEYDEF('LOAD')
      CALL KEYDEF('VERBOSE')
      CALL KEYDEF('ABSORP')

C  Set up default values.
      HAVEBOX = .FALSE.
      LOAD = .FALSE.
      ABSORP = .FALSE.
      VERBOSE = .FALSE.
      HAVEFILE = .FALSE.
      MAXITER = 100
      GAIN=1
      RN=0
      DO 8701 I=1, NCON
         TWORD = WORD(I)
         L = UPPER(TWORD)
         IF (TWORD(1:4).EQ.'BOX=') THEN
            CALL ASSIGN(WORD(I),F,PARM)
            IF (XERR) RETURN
            IBN = NINT(F)
            HAVEBOX = .TRUE.
         ELSE IF (TWORD(1:8).EQ.'MAXITER=') THEN
            CALL ASSIGN(WORD(I),F,PARM)
            IF (XERR) RETURN
            MAXITER = NINT(F)
         ELSE IF (TWORD(1:5).EQ.'GAIN=') THEN
            CALL ASSIGN(WORD(I),GAIN,PARM)
            IF (XERR) RETURN
         ELSE IF (TWORD(1:3).EQ.'RN=') THEN
            CALL ASSIGN(WORD(I),RN,PARM)
            IF (XERR) RETURN
         ELSE IF (TWORD.EQ.'ABSORP') THEN
            ABSORP = .TRUE.
         ELSE IF (TWORD.EQ.'LOAD') THEN
            LOAD = .TRUE.
         ELSE IF (TWORD.EQ.'VERBOSE') THEN
            VERBOSE = .TRUE.
         ELSE IF (TWORD(1:6).EQ.'LINES=') THEN
            LINEFILE = WORD(I)(7:)
            HAVEFILE = .TRUE.
         END IF
 8701 CONTINUE

C  Exit if we were given a keyword we don''t understand.
      IF (.NOT. KEYCHECK()) THEN
         XERR = .TRUE.
         RETURN
      END IF

      ISP = IM
      IF (HAVEBOX) THEN
        CALL GETBOX(IBN,ICOORD(1,IM),SR,ER,SC,EC)
        IF (XERR) RETURN
      ELSE
        SR = IMAGESR
        ER = IMAGEER
        SC = IMAGESC
        EC = IMAGEEC
      END IF

      IF (HAVEFILE) THEN
        L = NUMCHAR(LINEFILE)
	print *, 'opening: ', linefile(1:l)

        OPEN(1,FILE=LINEFILE(1:l),STATUS='old',IOSTAT=IERR)
        IF (IERR .NE. 0) THEN
          PRINT *, 'Error opening file: ', LINEFILE
          XERR = .TRUE.
          RETURN
        END IF
      END IF

1     CONTINUE
      IF (HAVEFILE) THEN
	print *, 'reading'
        READ(1,'(A)',END=99) LINE
 	print *, 'line: ', line
        READ(LINE,*,END=99) W0, S, S, S, WID, B1, B2, B3, B4
	print *, 'read', w0, wid, b1, b2, b3,b4
        SC = INT(PIXLAM(W0-WID, ISP))
        EC = INT(PIXLAM(W0+WID, ISP))+1
      ELSE
        B1=-1
        B2=-1
        B3=-1
        B4=-1
      END IF
	PRINT *, 'b: ', b1, b2, b3,b4

      IF (B1 .GT. 0) THEN
	print *, 'isp: ', isp
        IC1 = INT(PIXLAM(B1,ISP))
        IC2 = INT(PIXLAM(B2,ISP))+1
        IC3 = INT(PIXLAM(B3,ISP))
        IC4 = INT(PIXLAM(B4,ISP))+1
        FITCONT = .FALSE.
        NPTS = 0
	print *, 'ic: ', ic1, ic2, ic3, ic4
        DO IX=IC1,IC2
          NPTS=NPTS+1
          XFIT(NPTS) = LAMPIX(DBLE(IX),ISP)-W0
          YFIT(NPTS) = A(IX,SR)
	print *, npts, ix, xfit(npts), yfit(npts)
          W(NPTS) = 1.
        END DO
        DO IX=IC3,IC4
          NPTS=NPTS+1
          XFIT(NPTS) = LAMPIX(DBLE(IX),ISP)-W0
          YFIT(NPTS) = A(IX,SR)
	print *, npts, xfit(npts), yfit(npts)
          W(NPTS) = 1.
        END DO
	print *, 'calling glls'
        IF (.NOT. GLLS(XFIT,YFIT,W,NPTS,LPAR,2,DPAR,WORK,VAR,FPOLY,.FALSE.)) THEN
          PRINT *, 'Error in GLLS'
          XERR = .TRUE.
          RETURN
        END IF 
	print *, 'done glls'
	PRINT *, 'Continuum fit: ', LPAR(1), LPAR(2)
      ELSE
        FITCONT = .TRUE.
      END IF
C Get initial guess of  parameters
C   par(1) = gaussian intensity
C   par(2) = center
C   par(3) = width
C   par(4) = sky
      IF (ABSORP) THEN
        PAR(4) = -1E10
        PAR(1) = 1E10
      ELSE
        PAR(4) = 1E10
        PAR(1) = -1E10
      END IF
      DO IX=SC,EC
        VAL=A(IX,SR)
        IF (ABSORP) THEN
          IF (VAL .GT. PAR(4)) PAR(4) = VAL
          IF (VAL .LT. PAR(1)) PAR(1) = VAL
        ELSE
          IF (VAL .LT. PAR(4)) PAR(4) = VAL
          IF (VAL .GT. PAR(1)) PAR(1) = VAL
        END IF
      END DO

      IF (.NOT. FITCONT) PAR(4) = LPAR(1)

      IF (ABSORP) PAR(1) = PAR(4) - PAR(1)
      TOT = 0.
      TOT2 = 0.
      TOTINTEN = 0.
      DO IX=SC,EC
        VAL=A(IX,SR)-PAR(4)
        IF (ABSORP) VAL = -1 * VAL
        TOT = TOT +  VAL*IX
        TOT2 = TOT2 + VAL*IX**2
        TOTINTEN = TOTINTEN + VAL
      END DO
      PAR(2) = TOT/TOTINTEN
      PAR(3) = TOT2/TOTINTEN - PAR(2)**2

      DO IX=SC,EC
        VAL=A(IX,SR)-PAR(4)
        IF (ABSORP) VAL = -1 * VAL
        IF (VAL .GT. 0.5*PAR(1)) PAR(3) = ABS(IX-PAR(2))
      END DO
	if (verbose)	print *, 'par: ', par

C  Fit function:  I = I_0 exp -0.5*(x-x0)**2/sig**2 + c
C    absorption:  I = c - I_0 exp -0.5*(x-x0)**2/sig**2
      NITER = 0
      LAMBDA = 1.E-6
      CHI2OLD = 0
101   CONTINUE
      NITER = NITER + 1
      IF (NOGO) GOTO 199

      IF (FITCONT) THEN
        NPAR = 4
      ELSE
        NPAR = 3
      END IF
      DO IPAR=1,NPAR
        BETA(IPAR) = 0.
        DO JPAR=1,NPAR
          ALPHA(JPAR,IPAR) = 0.
        END DO
      END DO
      CHI2 = 0
      DO IX=SC,EC
        VAL=A(IX,SR)
        SIG2 = MAX(0.,VAL)/GAIN+(RN/GAIN)**2
        F = PAR(1)*EXP(-0.5*(IX-PAR(2))**2/PAR(3)**2)
        IF (FITCONT) THEN
          CONT = PAR(4)
        ELSE
          CONT = LPAR(1) + LPAR(2)*(LAMPIX(DBLE(IX),ISP)-W0)
        END IF
        IF (ABSORP) THEN
          F = CONT - F
        ELSE
          F = CONT + F
        END IF
        CHI2 = CHI2 + (VAL-F)**2/SIG2
        DRV(1) = (F-CONT)/PAR(1)
        DRV(2) = (F-CONT)*(IX-PAR(2))/PAR(3)**2
        DRV(3) = (F-CONT)*(IX-PAR(2))**2/PAR(3)**3
        DRV(4) = 1.
	if (verbose) print *, ix, f, val, sig2, (drv(ipar), ipar=1,npar)
        DO IPAR=1,NPAR
          BETA(IPAR) = BETA(IPAR) + (VAL-F)*DRV(IPAR)/SIG2
          DO JPAR=1,NPAR
            ALPHA(JPAR,IPAR) = ALPHA(JPAR,IPAR) + DRV(IPAR)*DRV(JPAR)/SIG2
          END DO
        END DO
      END DO
	print 1001, niter, chi2, chi2old, lambda, 
     &        (par(ipar),ipar=1,npar), gain, rn
1001	format(i4,7e12.3,2f8.2)
      
      IF (NITER .GT. 1 .AND. CHI2 .GT. CHI2OLD) THEN
        DO IPAR = 1, NPAR
          PAR(IPAR) = PAROLD(IPAR)
          BETA(IPAR) = BETAOLD(IPAR)
          DO JPAR = 1, NPAR
           ALPHA(JPAR,IPAR) = ALPHAOLD(JPAR,IPAR)
          END DO
        END DO
        LAMBDA = LAMBDA*10
        IF (LAMBDA .GT. 1E6) GOTO 199
      ELSE
        CHI2OLD = CHI2
        LAMBDA = MAX(1.E-6,LAMBDA/10.)
        DO IPAR = 1, NPAR
          PAROLD(IPAR) = PAR(IPAR)
          BETAOLD(IPAR) = BETA(IPAR)
          DO JPAR = 1, NPAR
           ALPHAOLD(JPAR,IPAR) = ALPHA(JPAR,IPAR)
          END DO
        END DO
      END IF

      DO IPAR=1,NPAR
        ALPHA(IPAR,IPAR) = ALPHA(IPAR,IPAR)*(1+LAMBDA)
      END DO
      CALL INVERS(ALPHA,MAXPAR,NPAR,ISTAT)
	if (istat .ne. 0) then
	  print *, 'Error inverting matrix'
	  goto 199
        end if
      CALL VMUL(ALPHA,MAXPAR,NPAR,BETA,DEL)

      DO IPAR = 1, NPAR
        PAR(IPAR) = PAR(IPAR) + DEL(IPAR)
        IF (IPAR .EQ. 4 .AND. PAR(IPAR) .LT. 0) THEN
          PAR(IPAR) = (PAR(IPAR) - DEL(IPAR) ) / 2.
        END IF
      END DO
      if (niter .lt. maxiter)  goto 101

      do ix=sc,ec
        IF (FITCONT) THEN
          CONT = PAR(4)
        ELSE
          CONT = LPAR(1) + LPAR(2)*(LAMPIX(DBLE(IX),ISP)-W0)
        END IF
        IF (ABSORP) THEN
          F = CONT - PAR(1)*EXP(-0.5*(IX-PAR(2))**2/PAR(3)**2)
        ELSE
          F = CONT + PAR(1)*EXP(-0.5*(IX-PAR(2))**2/PAR(3)**2)
        END IF
        A(IX,SR) = F
      end do

	print *, (par(ipar),ipar=1,npar)
      IF (LOAD) THEN
        CALL VARIABLE('C',PAR(4),.TRUE.)
        CALL VARIABLE('I0',PAR(1),.TRUE.)
        CALL VARIABLE('X0',PAR(2),.TRUE.)
        CALL VARIABLE('X0ERR',SQRT(ALPHA(2,2)),.TRUE.)
        CALL VARIABLE('SIG',PAR(3),.TRUE.)
        CALL VARIABLE('CHI2',CHI2,.TRUE.)
      END IF

      IF (HAVEFILE) THEN
        GOTO 1
      END IF

99    CONTINUE
      IF (HAVEFILE) CLOSE(1)

      RETURN
199   CONTINUE
      IF (HAVEFILE) CLOSE(1)
      XERR = .TRUE.
      RETURN
      END

